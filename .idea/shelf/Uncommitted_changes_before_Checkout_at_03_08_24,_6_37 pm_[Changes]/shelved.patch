Index: backend/src/main/resources/static/quickfillbills.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>Quick Fill the Bills</title>\n    <style>\n        body {\n            font-family: Arial, sans-serif;\n            background-color: #f8f9fa;\n            margin: 0;\n            padding: 0;\n            overflow: auto; /* Ensure body is scrollable */\n        }\n        .header, .footer {\n            background-color: #ffffff;\n            color: #343a40;\n            padding: 5px 20px;\n            text-align: center;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n        }\n        .header {\n            height: 70px;\n        }\n        .header img {\n            height: 50px;\n            margin-right: 20px;\n        }\n        .nav-bar {\n            display: flex;\n            justify-content: flex-end;\n            align-items: center;\n            height: 100%;\n            width: 100%;\n        }\n        .nav-bar a {\n            margin-left: 10px;\n            text-decoration: none;\n            color: #343a40;\n            padding: 10px 20px;\n            background-color: #17a2b8;\n            border-radius: 4px;\n        }\n        .nav-bar a:hover {\n            background-color: #138496;\n        }\n        .footer {\n            position: fixed;\n            bottom: 0;\n            left: 0;\n            width: 100%;\n            text-align: center;\n            height: 50px;\n            line-height: 50px;\n        }\n        .container {\n            max-width: 800px;\n            margin: auto;\n            padding: 20px;\n            background-color: #fff;\n            border-radius: 8px;\n            box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n            position: relative;\n            margin-top: 20px;\n            margin-bottom: 70px; /* Adjusted for footer */\n        }\n        .main-title {\n            text-align: center;\n            margin-bottom: 20px;\n            font-size: 24px;\n        }\n        .bill-form {\n            display: flex;\n            flex-direction: column;\n            align-items: flex-start;\n        }\n        .form-row {\n            display: flex;\n            width: 100%;\n            flex-wrap: wrap;\n            margin-bottom: 10px;\n        }\n        .form-row label,\n        .form-row input,\n        .form-row select,\n        .form-row textarea {\n            margin-right: 10px;\n            margin-bottom: 10px;\n        }\n        .form-row label {\n            flex: 1;\n            text-align: right;\n        }\n        .form-row input,\n        .form-row select,\n        .form-row textarea {\n            flex: 2;\n            padding: 5px;\n            border: 1px solid #ccc;\n            border-radius: 4px;\n            width: 100%;\n            max-width: 150px;\n        }\n        .button {\n            padding: 10px 20px;\n            border: none;\n            color: #fff;\n            cursor: pointer;\n            margin: 5px;\n            text-decoration: none;\n            border-radius: 4px;\n        }\n        .gopal {\n            padding: 10px 20px;\n            width: 100px;\n            border: none;\n            color: #fff;\n            cursor: pointer;\n            margin: 5px;\n            text-decoration: none;\n            border-radius: 4px;\n        }\n        .button:hover {\n            opacity: 0.9;\n        }\n        #fill-more-btn {\n            background-color: #007bff;\n        }\n        #edit-save-btn {\n            background-color: #28a745;\n        }\n        #add-bill-btn {\n            background-color: #17a2b8;\n        }\n        #add-bill-btns {\n            background-color: #17a2b8;\n        }\n        #remove-bill-btn {\n            background-color: #dc3545;\n        }\n        #see-all-bills-btn {\n            background-color: #6c757d;\n        }\n        .hidden-fields {\n            display: none;\n            flex-wrap: wrap;\n            width: 100%;\n            margin-bottom: 10px;\n        }\n        .buttons {\n            text-align: center;\n            padding-left: 170px;\n        }\n        .buttons .button {\n            margin: 5px;\n        }\n        .buttons .buttoni {\n            margin: 20px;\n        }\n        .bill-list {\n            margin-top: 20px;\n        }\n        table {\n            width: 100%;\n            border-collapse: collapse;\n            margin-top: 20px;\n        }\n        table, th, td {\n            border: 1px solid #ccc;\n        }\n        th, td {\n            padding: 10px;\n            text-align: left;\n        }\n        th {\n            background-color: #f4f4f4;\n        }\n        .dashboard-button {\n            position: absolute;\n            top: 20px;\n            left: 20px;\n            padding: 10px 20px;\n            background-color: #17a2b8;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .dashboard-button:hover {\n            background-color: #138496;\n        }\n        .edit-button, .save-button {\n            padding: 5px 10px;\n            background-color: #007bff;\n            color: white;\n            border: none;\n            border-radius: 4px;\n            cursor: pointer;\n        }\n        .edit-button:hover, .save-button:hover {\n            background-color: #0056b3;\n        }\n        /* Adjust input fields size in the table */\n        table input[type=\"text\"],\n        table input[type=\"number\"],\n        table input[type=\"date\"],\n        table input[type=\"checkbox\"],\n        table textarea {\n            width: 80px;\n            padding: 3px;\n            border-radius: 4px;\n        }\n        .container {\n            width: auto;\n            max-width: 60%;\n        }\n    </style>\n</head>\n<body>\n<header class=\"header\">\n    <img src=\"./WhatsApp%20Image%202024-07-26%20at%2012.01.06_dcf1cf9e.jpg\" alt=\"Logo\"> <!-- Add your logo here -->\n    <nav class=\"nav-bar\">\n        <a href=\"index.html\" class=\"button\">Home</a>\n        <a href=\"billsdashboard.html\" class=\"button\">Dashboard</a>\n    </nav>\n</header>\n<div class=\"container\">\n    <div class=\"main-title\">Quick Fill the Bills</div>\n    <div id=\"bill-container\">\n        <div class=\"bill-form\">\n            <div class=\"form-row\">\n                <label class=\"label-reason\" for=\"reason\">Reason for the bill:</label>\n                <input class=\"input-reason\" type=\"text\" id=\"reason\" name=\"reason\">\n                <label class=\"label-amount\" for=\"amount\">Bill amount:</label>\n                <input class=\"input-amount\" type=\"number\" id=\"amount\" name=\"amount\">\n                <label class=\"label-date\" for=\"date\">Bill date:</label>\n                <input class=\"input-date\" type=\"date\" id=\"date\" name=\"date\">\n            </div>\n            <div id=\"more-fields\" class=\"hidden-fields\">\n                <div class=\"form-row\">\n                    <label class=\"label-category\" for=\"category\">Category:</label>\n                    <select class=\"select-category\" id=\"category\" name=\"category\">\n                        <option value=\"travel\">Travel</option>\n                        <option value=\"food\">Food</option>\n                        <option value=\"accommodation\">Accommodation</option>\n                        <option value=\"supplies\">Supplies</option>\n                    </select>\n                    <label class=\"label-reimbursed\" for=\"reimbursed\">Already reimbursed?</label>\n                    <input class=\"input-reimbursed\" type=\"checkbox\" id=\"reimbursed\" name=\"reimbursed\">\n                    <label class=\"label-submitted-by\" for=\"submitted-by\">Submitted by:</label>\n                    <select class=\"select-submitted-by\" id=\"submitted-by\" name=\"submitted-by\">\n                        <option value=\"current-user\">Current User</option>\n                        <option value=\"other\">Other User</option>\n                    </select>\n                    <label class=\"label-comments\" for=\"comments\">Comments:</label>\n                    <textarea class=\"textarea-comments\" id=\"comments\" name=\"comments\"></textarea>\n                </div>\n            </div>\n            <div class=\"buttons\">\n                <button class=\"button\" id=\"fill-more-btn\">Fill More</button>\n                <button class=\"button\" id=\"add-bill-btns\" onclick=\"saveDetails()\">Save</button>\n                <button class=\"button\" id=\"add-bill-btn\">+ Add Bill</button>\n                <button class=\"button\" id=\"remove-bill-btn\">- Remove Bill</button>\n                <button class=\"button\" id=\"see-all-bills-btn\">See All Bills</button>\n            </div>\n        </div>\n    </div>\n    <div id=\"bill-list\" class=\"bill-list\">\n        <table id=\"bill-table\">\n            <thead>\n            <tr>\n                <th>Reason</th>\n                <th>Amount</th>\n                <th>Date</th>\n                <th>Category</th>\n                <th>Reimbursed</th>\n                <th>Submitted By</th>\n                <th>Comments</th>\n                <th>Actions</th>\n            </tr>\n            </thead>\n            <tbody>\n            <!-- Rows will be added here dynamically -->\n            </tbody>\n        </table>\n    </div>\n</div>\n<footer class=\"footer\">\n    &copy; 2024 Quick Fill the Bills. All rights reserved.\n</footer>\n<script>\n    document.addEventListener('DOMContentLoaded', function() {\n       let isFillMore = true;  // Start with fields hidden\n\n       function toggleFillMoreFields(event) {\n           const form = event.target.closest('.bill-form');\n           const moreFields = form.querySelector('#more-fields');\n           if (isFillMore) {\n               moreFields.classList.remove('hidden-fields');\n               event.target.textContent = 'Fill Less';\n           } else {\n               moreFields.classList.add('hidden-fields');\n               event.target.textContent = 'Fill More';\n           }\n           isFillMore = !isFillMore;\n       }\n\n       function getFormValues(form) {\n           const reason = form.querySelector('[id^=\"reason\"]').value;\n           const amount = form.querySelector('[id^=\"amount\"]').value;\n           const date = form.querySelector('[id^=\"date\"]').value;\n           const category = form.querySelector('[id^=\"category\"]').value;\n           const reimbursed = form.querySelector('[id^=\"reimbursed\"]').checked;\n           const submittedBy = form.querySelector('[id^=\"submitted-by\"]').value;\n           const comments = form.querySelector('[id^=\"comments\"]').value;\n\n           return { reason, amount, date, category, reimbursed, submittedBy, comments };\n       }\n\n       function saveBill(event) {\n           const form = event.target.closest('.bill-form');\n           const { reason, amount, date, category, reimbursed, submittedBy, comments } = getFormValues(form);\n\n           const billTable = document.getElementById('bill-table').getElementsByTagName('tbody')[0];\n           const newRow = billTable.insertRow();\n\n           const reasonCell = newRow.insertCell(0);\n           const amountCell = newRow.insertCell(1);\n           const dateCell = newRow.insertCell(2);\n           const categoryCell = newRow.insertCell(3);\n           const reimbursedCell = newRow.insertCell(4);\n           const submittedByCell = newRow.insertCell(5);\n           const commentsCell = newRow.insertCell(6);\n           const actionCell = newRow.insertCell(7);\n\n           const reasonLink = document.createElement('a');\n           reasonLink.href = 'billpage.html'; // Replace with the actual path you want to navigate to\n           reasonLink.textContent = reason;\n           reasonLink.style.textDecoration = 'none';\n           reasonLink.style.color = '#007bff'; // Optional: color for the link\n           reasonCell.appendChild(reasonLink);\n\n           amountCell.textContent = amount;\n           dateCell.textContent = date;\n           categoryCell.textContent = category;\n           reimbursedCell.textContent = reimbursed ? 'Yes' : 'No';\n           submittedByCell.textContent = submittedBy;\n           commentsCell.textContent = comments;\n\n           const editButton = document.createElement('button');\n           editButton.className = 'edit-button';\n           editButton.textContent = 'Edit';\n           editButton.onclick = function () {\n               editBill(this);\n           };\n           actionCell.appendChild(editButton);\n\n           const saveButton = document.createElement('button');\n           saveButton.className = 'save-button';\n           saveButton.textContent = 'Save';\n           saveButton.style.display = 'none';\n           saveButton.onclick = function () {\n               saveBillEdits(this);\n           };\n           actionCell.appendChild(saveButton);\n\n           // Clear the form fields manually\n           form.querySelectorAll('input, select, textarea').forEach(element => {\n               if (element.type === 'checkbox') {\n                   element.checked = false;\n               } else if (element.type === 'select-one') {\n                   element.selectedIndex = 0;\n               } else {\n                   element.value = '';\n               }\n           });\n\n           const billData = {\n               reason: reason,\n               amount: amount,\n               date: date,\n               category: category,\n               reimbursed: reimbursed,\n               submittedBy: submittedBy,\n               comments: comments\n           };\n\n           fetch('http://localhost:8080/api/billing', {\n               method: 'POST',\n               headers: {\n                   'Content-Type': 'application/json'\n               },\n               body: JSON.stringify(billData)\n           })\n           .then(response => {\n               if (!response.ok) {\n                   return response.json().then(err => { throw err });\n               }\n               return response.json();\n           })\n           .then(data => {\n               console.log('Success:', data);\n               const id = data.id;\n               reasonLink.setAttribute('id', id); // Store the ID in the link for future reference\n\n           })\n           .catch((error) => {\n               console.error('Error:', error);\n           });\n       }\n\n       let formCounter = 1; // Start with 1 for the first cloned form\n\n       function addNewBillForm() {\n           const container = document.getElementById('bill-container');\n           const newBillForm = document.querySelector('.bill-form').cloneNode(true);\n\n           formCounter++;\n\n           // Update IDs and names for the new form elements\n           newBillForm.querySelectorAll('input, select, textarea').forEach((element) => {\n               const id = element.getAttribute('id');\n               if (id) {\n                   const newId = `${id}-${formCounter}`;\n                   element.setAttribute('id', newId);\n                   element.setAttribute('name', newId);\n               }\n               // Clear the values of the cloned form elements\n               if (element.type === 'checkbox') {\n                   element.checked = false;\n               } else if (element.type === 'select-one') {\n                   element.selectedIndex = 0;\n               } else {\n                   element.value = '';\n               }\n           });\n\n           container.appendChild(newBillForm);\n           attachEventListenersToForm(newBillForm);  // Attach event listeners to the new form\n       }\n\n       function removeLastBillForm() {\n           const forms = document.querySelectorAll('.bill-form');\n           if (forms.length > 1) {\n               forms[forms.length - 1].remove();\n           }\n       }\n\n\n    window.saveDetails = function() {\n        const reason = document.getElementById('reason').value;\n        console.log('Reason:', reason); // Log reason\n\n        const amount = document.getElementById('amount').value;\n        const date = document.getElementById('date').value;\n        const category = document.getElementById('category').value;\n        const reimbursed = document.getElementById('reimbursed').checked;\n        const submittedBy = document.getElementById('submitted-by').value;\n        const comments = document.getElementById('comments').value;\n\n        const details = {\n            reason: reason,\n            amount: amount,\n            date: date,\n            category: category,\n            reimbursed: reimbursed,\n            submittedBy: submittedBy,\n            comments: comments\n        };\n        console.log('Details to save:', details); // Log details object\n\n        localStorage.setItem('userDetails', JSON.stringify(details));\n        alert('Details saved successfully!');\n    }\n\n\n\n\n       function editBill(button) {\n           const row = button.closest('tr');\n           const cells = row.getElementsByTagName('td');\n\n           const reasonLink = cells[0].querySelector('a');\n           const amount = cells[1].textContent;\n           const date = cells[2].textContent;\n           const category = cells[3].textContent;\n           const reimbursed = cells[4].textContent === 'Yes';\n           const submittedBy = cells[5].textContent;\n           const comments = cells[6].textContent;\n\n           cells[1].innerHTML = `<input type=\"number\" value=\"${amount}\">`;\n           cells[2].innerHTML = `<input type=\"date\" value=\"${date}\">`;\n           cells[3].innerHTML = `\n               <select>\n                   <option value=\"travel\"${category === 'travel' ? ' selected' : ''}>Travel</option>\n                   <option value=\"food\"${category === 'food' ? ' selected' : ''}>Food</option>\n                   <option value=\"accommodation\"${category === 'accommodation' ? ' selected' : ''}>Accommodation</option>\n                   <option value=\"supplies\"${category === 'supplies' ? ' selected' : ''}>Supplies</option>\n               </select>`;\n           cells[4].innerHTML = `<input type=\"checkbox\"${reimbursed ? ' checked' : ''}>`;\n           cells[5].innerHTML = `\n               <select>\n                   <option value=\"current-user\"${submittedBy === 'current-user' ? ' selected' : ''}>Current User</option>\n                   <option value=\"other\"${submittedBy === 'other' ? ' selected' : ''}>Other User</option>\n               </select>`;\n           cells[6].innerHTML = `<textarea>${comments}</textarea>`;\n\n           button.style.display = 'none';\n           row.querySelector('.save-button').style.display = 'inline';\n       }\n\n       function saveBillEdits(button) {\n    const row = button.closest('tr');\n    const cells = row.getElementsByTagName('td');\n    const reasonLink = cells[0].querySelector('a');\n    const billId = reasonLink.getAttribute('id');\n    console.log(\"billId:\", billId);\n\n    const reason = reasonLink.textContent;\n    const amount = cells[1].querySelector('input').value;\n    const date = cells[2].querySelector('input').value;\n    const category = cells[3].querySelector('select').value;\n    const reimbursed = cells[4].querySelector('input').checked ? 'Yes' : 'No';\n    const submittedBy = cells[5].querySelector('select').value;\n    const comments = cells[6].querySelector('textarea').value;\n\n    const updatedBill = {\n        id: billId,\n        reason: reason,\n        amount: amount,\n        date: date,\n        category: category,\n        reimbursed: reimbursed === 'Yes',\n        submittedBy: submittedBy,\n        comments: comments\n    };\n\n    fetch(`http://localhost:8080/api/billing/${billId}`, {\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(updatedBill)\n    })\n    .then(response => response.json())\n    .then(data => {\n        console.log('Success:', data);\n\n        cells[1].textContent = amount;\n        cells[2].textContent = date;\n        cells[3].textContent = category;\n        cells[4].textContent = reimbursed;\n        cells[5].textContent = submittedBy;\n        cells[6].textContent = comments;\n\n        // Update local storage with the new details\n        localStorage.setItem('userDetails', JSON.stringify(updatedBill));\n        console.log('Updated Details to save:', updatedBill);\n\n        button.style.display = 'none';\n        row.querySelector('.edit-button').style.display = 'inline';\n    })\n    .catch((error) => {\n        console.error('Error:', error);\n    });\n}\n\n\n       function displayAllBills(bills) {\n           const billTableBody = document.querySelector('#bill-table tbody');\n           billTableBody.innerHTML = '';\n           bills.forEach(bill => {\n               const billRow = document.createElement('tr');\n               billRow.innerHTML = `\n                   <td><a href=\"billpage.html\" data-id=\"${bill.id}\">${bill.reason}</a></td>\n                   <td>${bill.amount}</td>\n                   <td>${bill.date}</td>\n                   <td>${bill.category}</td>\n                   <td>${bill.reimbursed ? 'Yes' : 'No'}</td>\n                   <td>${bill.submittedBy}</td>\n                   <td>${bill.comments}</td>\n                   <td>\n                       <button class=\"edit-button\">Edit</button>\n                       <button class=\"save-button\" style=\"display:none;\">Save</button>\n                   </td>\n               `;\n               billTableBody.appendChild(billRow);\n\n               // Attach event listeners to the buttons in the new row\n               const editButton = billRow.querySelector('.edit-button');\n               const saveButton = billRow.querySelector('.save-button');\n\n               editButton.addEventListener('click', function () {\n                   editBill(editButton);\n               });\n\n               saveButton.addEventListener('click', function () {\n                   saveBillEdits(saveButton);\n               });\n           });\n       }\n\n       function fetchAllBills() {\n           fetch('http://localhost:8080/api/billing')\n               .then(response => response.json())\n               .then(data => {\n                   console.log('Bills:', data);\n                   displayAllBills(data);\n               })\n               .catch((error) => {\n                   console.error('Error:', error);\n                   alert('Error fetching bills');\n               });\n       }\n\n       function attachEventListenersToForm(form) {\n           form.querySelector('#fill-more-btn').addEventListener('click', toggleFillMoreFields);\n           form.querySelector('#add-bill-btns').addEventListener('click', saveBill);\n           form.querySelector('#add-bill-btn').addEventListener('click', addNewBillForm);\n           form.querySelector('#remove-bill-btn').addEventListener('click', removeLastBillForm);\n           form.querySelector('#see-all-bills-btn').addEventListener('click', fetchAllBills);\n       }\n\n       // Attach event listeners to the initial form\n       attachEventListenersToForm(document.querySelector('.bill-form'));\n   });\n\n\n</script>\n</body>\n</html>\n
===================================================================
diff --git a/backend/src/main/resources/static/quickfillbills.html b/backend/src/main/resources/static/quickfillbills.html
--- a/backend/src/main/resources/static/quickfillbills.html	
+++ b/backend/src/main/resources/static/quickfillbills.html	
@@ -336,7 +336,7 @@
            const actionCell = newRow.insertCell(7);
 
            const reasonLink = document.createElement('a');
-           reasonLink.href = 'billpage.html'; // Replace with the actual path you want to navigate to
+           reasonLink.href = '#'; // Replace with the actual path you want to navigate to
            reasonLink.textContent = reason;
            reasonLink.style.textDecoration = 'none';
            reasonLink.style.color = '#007bff'; // Optional: color for the link
@@ -402,8 +402,11 @@
            })
            .then(data => {
                console.log('Success:', data);
-               const id = data.id;
-               reasonLink.setAttribute('id', id); // Store the ID in the link for future reference
+<!--               const id = data.id;-->
+<!--               reasonLink.setAttribute('id', id); // Store the ID in the link for future reference-->
+
+                const id = data.id;
+                reasonLink.setAttribute('href', `billpage.html?id=${id}`); // Set the link with the id parameter
 
            })
            .catch((error) => {
Index: backend/src/main/java/com/example/job_desc_backend/controller/BillWebController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.job_desc_backend.controller;\n\n\n\nimport com.example.job_desc_backend.model.BillEntity;\nimport com.example.job_desc_backend.model.Billpdf;\nimport com.example.job_desc_backend.repository.BillMongoRepository;\nimport com.example.job_desc_backend.repository.BillPdfRepository;\nimport com.example.job_desc_backend.service.BillDataService;\nimport org.bson.types.ObjectId;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.mongodb.gridfs.GridFsTemplate;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/api/billing\")\npublic class BillWebController {\n\n    @Autowired\n    private BillDataService billService;\n\n    @PostMapping\n    public ResponseEntity<BillEntity> createBill(@RequestBody BillEntity bill) {\n        BillEntity savedBill = billService.saveBill(bill);\n        return ResponseEntity.ok(savedBill);\n    }\n\n    @GetMapping\n    public ResponseEntity<List<BillEntity>> getAllBills() {\n        List<BillEntity> bills = billService.getAllBills();\n        return ResponseEntity.ok(bills);\n    }\n\n    @PutMapping(\"/{id}\")\n    public ResponseEntity<BillEntity> updateBill(@PathVariable String id, @RequestBody BillEntity updatedBill) {\n        BillEntity existingBill = billService.getBillById(id);\n        if (existingBill == null) {\n            return ResponseEntity.notFound().build();\n        }\n\n        updatedBill.setId(id);\n        BillEntity savedBill = billService.saveBill(updatedBill);\n        return ResponseEntity.ok(savedBill);\n    }\n\n\n    @DeleteMapping(\"/{id}\")\n    public ResponseEntity<Void> deleteBill(@PathVariable String id) {\n        billService.deleteBill(id);\n        return ResponseEntity.noContent().build();\n    }\n\n    @GetMapping(\"/dashboard/stats\")\n    public ResponseEntity<Map<String, Long>> getDashboardStats() {\n        long totalBills = billRepository.count();\n        long totalToBeClaimed = billRepository.countByClientReimbursed(false);\n        long pendingReimbursements = billRepository.countByReimbursed(false);\n\n        Map<String, Long> stats = new HashMap<>();\n        stats.put(\"totalBills\", totalBills);\n        stats.put(\"totalToBeClaimed\", totalToBeClaimed);\n        stats.put(\"pendingReimbursements\", pendingReimbursements);\n\n        return ResponseEntity.ok(stats);\n    }\n\n    @Autowired\n    BillPdfRepository billPdfRepository;\n    @Autowired\n    GridFsTemplate gridFsTemplate;\n\n\n\n    @Autowired\n    private BillMongoRepository billRepository;\n\n    @PostMapping(\"/{id}\")\n    public ResponseEntity<BillEntity> uploadBill(\n            @PathVariable String id,\n            @RequestPart(\"bill\") BillEntity bill,\n            @RequestPart(value = \"file\", required = false) MultipartFile file\n    ) throws IOException {\n\n        // Verify if the bill with the given ID exists\n        BillEntity existingBill = billService.getBillById(id);\n        if (existingBill == null) {\n            return ResponseEntity.notFound().build();\n        }\n\n        // If a file is provided, process and store it\n        if (file != null && !file.isEmpty()) {\n            // Store the file in GridFS and get the file ID\n            ObjectId fileId = gridFsTemplate.store(file.getInputStream(), file.getOriginalFilename(), file.getContentType());\n\n            // Create a Billpdf object and set its properties\n            Billpdf billpdf = new Billpdf();\n            billpdf.setFileId(fileId.toString());\n            billpdf.setContentType(file.getContentType());\n            billpdf.setFileName(file.getOriginalFilename());\n\n            // Save the Billpdf object in the repository\n            billPdfRepository.save(billpdf);\n\n            // Set the file ID in the bill entity\n            bill.setFileId(fileId.toString());\n        }\n\n        // Ensure the ID of the updated bill matches the existing one\n        bill.setId(id);\n\n        // Save the updated bill entity\n        BillEntity savedBill = billRepository.save(bill);\n\n        // Return the saved bill entity with a 200 OK response\n        return ResponseEntity.ok(savedBill);\n    }\n\n\n\n}\n
===================================================================
diff --git a/backend/src/main/java/com/example/job_desc_backend/controller/BillWebController.java b/backend/src/main/java/com/example/job_desc_backend/controller/BillWebController.java
--- a/backend/src/main/java/com/example/job_desc_backend/controller/BillWebController.java	
+++ b/backend/src/main/java/com/example/job_desc_backend/controller/BillWebController.java	
@@ -38,6 +38,12 @@
         return ResponseEntity.ok(bills);
     }
 
+    @GetMapping("/getBillById")
+    public ResponseEntity<BillEntity> getBillById(@RequestParam String id){
+        BillEntity bill=billRepository.findById(id).get();
+        return ResponseEntity.ok(bill);
+    }
+
     @PutMapping("/{id}")
     public ResponseEntity<BillEntity> updateBill(@PathVariable String id, @RequestBody BillEntity updatedBill) {
         BillEntity existingBill = billService.getBillById(id);
@@ -81,7 +87,7 @@
     @Autowired
     private BillMongoRepository billRepository;
 
-    @PostMapping("/{id}")
+    @PostMapping("/updateBill/{id}")
     public ResponseEntity<BillEntity> uploadBill(
             @PathVariable String id,
             @RequestPart("bill") BillEntity bill,
